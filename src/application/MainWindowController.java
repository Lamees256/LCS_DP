package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.SplitPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.stage.Stage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.System.Logger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

import javafx.event.ActionEvent;

public class MainWindowController {
	Parent root;
//	@FXML

	@FXML
	ImageView offLb, onLB;
	@FXML
	private Button browseBt;
	@FXML
	private Pane rootPane;
	@FXML
	private AnchorPane sourceAnchor;
	@FXML
	private AnchorPane ledAnchor, ledPane;
	@FXML
	private Button print_table;
	@FXML
	private TextField fileNameTf;
	@FXML
	private TextArea tableArea;
	@FXML
	private TextField numOfLeds, LCS;
	@FXML
	public VBox sourceBox;
	int[][] table;
	int[] leds, source;
	public int num;
	Scanner scanner;
	String string = "";

	// Event Listener on Button[#browseBt].onAction
	@FXML
	public void browse(ActionEvent event) {
		// TODO Autogenerated
		FileChooser fc = new FileChooser();
		fc.getExtensionFilters().addAll(new ExtensionFilter("txt files", "*.txt"));
		File file = fc.showOpenDialog(null);
		fileNameTf.setPromptText(file + "");
		try {
			scanner = new Scanner(file);
			readFile(file);
		} catch (FileNotFoundException e1) {
			System.out.println("Please Choose a File");
		} catch (java.lang.NullPointerException e2) {
			System.out.println("No File Selected");
		}
	}

	public void readFile(File file) {
		if (file.exists()) {
			Scanner in;
			int numOfLeds = 0;
			try {
				in = new Scanner(file);
				// make sure that file only has two lines in it and it reads two at time
				// let it skip empty lines
				// make sure first line only has n and the second line has #'s from 1-n
				while (in.hasNext()) {
					String line1 = in.nextLine().trim();
					String line2 = in.nextLine().trim();
					try {
						numOfLeds = Integer.parseInt(line1);
						// System.out.println(numofLeds);
					} catch (NumberFormatException e) {
						e.printStackTrace();
					}
					String tokens[] = line2.split(" ");
					// int[] leds = new int[tokens.length];// changes the array of strings into an
					// array of integers
					leds = new int[tokens.length];
					for (int i = 0; i < tokens.length; i++) {
						leds[i] = Integer.parseInt(tokens[i]);
					}
					source = new int[tokens.length];
					for (int j = 0; j < leds.length; j++) {
						source[j] = j + 1;
					}
					if (numOfLeds == tokens.length) {
						LSC(source, leds);
						num = numOfLeds;
					} else {
						System.out.println("Incorrect Input. Please Try Again");
					}
				}
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			}
		}
	}

	public int LSC(int[] source, int[] leds) { // this function finds the length of the LCS
		int m = source.length;
		int n = leds.length;
		table = new int[m + 1][n + 1];
		int[][] path = new int[m + 1][n + 1];
		for (int i = 1; i <= m; i++) {
			table[i][0] = 0;
		}
		for (int j = 1; j <= m; j++) {
			table[0][j] = 0;
		}
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {

				if (source[i - 1] == leds[j - 1]) {
					table[i][j] = table[i - 1][j - 1] + 1;
					path[i][j] = 1; // diagonal arrow
				} else if (table[i][j - 1] > table[i - 1][j]) {
					table[i][j] = table[i][j - 1];
					path[i][j] = 2; // left arrow
				} else {
					table[i][j] = table[i - 1][j];
					path[i][j] = 3;
				}

			}
		}
		numOfLeds.setText(table[m][n] + "");
		LCS.setText(printLCS(source, leds, source.length, leds.length, path));
		// System.out.println(printLCS(source,leds,source.length,leds.length,path));
		// printTable();
		return table[m][n];
	}

	public String printLCS(int[] source, int[] leds, int i, int j, int[][] path) {
		if (i == 0 || j == 0) {
			return string;
		} else if (path[i][j] == 1) {
			printLCS(source, leds, i - 1, j - 1, path);
			string = string + source[i - 1] + " ";
			// res.add(source[i-1]);

		} else if (path[i][j] == 3) {
			printLCS(source, leds, i - 1, j, path);
		} else {
			printLCS(source, leds, i, j - 1, path);
		}
		return string;
	}

	@FXML
	public void printTable() {
		System.out.println();
		for (int[] row : table)
//			System.out.println(Arrays.toString(row));
			tableArea.appendText(Arrays.toString(row) + "\n");
	}

	@FXML
	void Test875342(ActionEvent event) throws IOException {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("Sample.fxml"));
		root = loader.load();
		SampleController sampleController = loader.getController();
		sampleController.circuitBoard(string, leds, source);
	}

	@FXML
	void Test(ActionEvent event) throws IOException {
		circuitBoard(string, leds, source);
	}

	public void circuitBoard(String string, int[] leds, int[] source) throws IOException {
		Stage stage = new Stage();
		ScrollPane pane = new ScrollPane();
		// pane.setStyle("-fx-background-color: black");
		pane.setStyle("-fx-background: black");
		HBox hbox = new HBox();
		HBox hbox2 = new HBox();
		//hbox2.setSpacing(30);
		HBox hbox3 = new HBox();
		hbox3.setSpacing(30);
		hbox.setSpacing(350);
		VBox ledLights = new VBox();
		VBox ledButtons = new VBox();
		VBox ledBox = new VBox();
		VBox sourceBox = new VBox();
		VBox pic = new VBox();
		ImageView battery = new ImageView("battery11.jpg");
		pic.getChildren().addAll(battery);
		pic.setAlignment(Pos.CENTER);
		sourceBox.setAlignment(Pos.CENTER);
		sourceBox.setSpacing(42);
		sourceBox.setPadding(new Insets(20, 20, 20, 20));
		ledButtons.setAlignment(Pos.CENTER);
		ledButtons.setSpacing(42);
		ledButtons.setPadding(new Insets(20, 20, 20, 20));
		ledLights.setSpacing(-3);

		int[] lights = new int[leds.length];
		String[] tokens = string.split(" ");
		int[] result = new int[tokens.length];
		for (int i = 0; i < tokens.length; i++) {
			result[i] = Integer.parseInt(tokens[i]);
		}
		for (int i = 0; i < source.length; i++) {
			RadioButton button = new RadioButton(source[i] + "");
			// button.setStyle("-fx-background-color: yellow");
			sourceBox.getChildren().addAll(button);
			for (int j = 0; j < result.length; j++) {
				if (source[i] == result[j]) {
					button.setSelected(true);
				}
			}
		}
		for (int i = 0; i < leds.length; i++) {
			lights[i] = 0;
			for (int j = 0; j < result.length; j++) {
				if (leds[i] == result[j]) {
					lights[i] = 1;
					// ledBox.getChildren().addAll(onLight);
				}
			}
		}
		for (int i = 0; i < lights.length; i++) {
			RadioButton lightB = new RadioButton(leds[i] + "");
			ledButtons.getChildren().addAll(lightB);
			if (lights[i] == 1) {
				lightB.setSelected(true);
				ImageView view2 = new ImageView("flash.gif");
				view2.setFitWidth(86);
				view2.setFitHeight(61);
				ledLights.getChildren().add(view2);
			} else {
				ImageView view = new ImageView("offLb.jpg");
				view.setFitWidth(86);
				view.setFitHeight(61);
				ledLights.getChildren().addAll(view);

			}
		}
		hbox3.getChildren().addAll(sourceBox,pic);
		hbox2.getChildren().addAll(ledLights, ledButtons);
		ledBox.getChildren().addAll(hbox2);
		hbox.getChildren().addAll(ledBox, hbox3);
		pane.setContent(hbox);
		// pane.getChildren().add(hbox);
		Scene scene = new Scene(pane, 800, 800);
		stage.setScene(scene);
		stage.setResizable(false);
		stage.show();
	}

	

}
